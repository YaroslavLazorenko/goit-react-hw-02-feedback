{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Section","children","this","props","Component","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","Statistics","good","neutral","bad","total","positivePercentage","isNaN","INITIAL_STATE","App","state","setState","prevState","toLowerCase","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAEMA,E,4JACJ,WACE,IAAQC,EAAaC,KAAKC,MAAlBF,SAER,OAAO,kCAAUA,Q,GAJCG,aAQPJ,ICRTK,E,4JACJ,WACE,MAAqCH,KAAKC,MAAlCG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBAEjB,OACE,qCACE,uDACCD,EAAQE,KAAI,SAAAC,GACX,OACE,wBAEEC,QAAS,WACPH,EAAgBE,IAHpB,SAMGA,GALIA,a,GAVWL,aAwBfC,ICxBTM,E,4JACJ,WACE,MAA0DT,KAAKC,MAAvDS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACE,qCACE,4CACA,sCACO,+BAAOJ,OAEd,yCACU,+BAAOC,OAEjB,qCACM,+BAAOC,OAEb,uCACQ,+BAAOC,QAEbE,MAAMD,IACN,mDACoB,iCAAOA,EAAP,iB,GArBLZ,aA6BVO,ICzBTO,EAAgB,CACpBN,KAAM,EACNC,QAAS,EACTC,IAAK,GAGDK,E,4MACJC,M,eAAaF,G,EAEbX,gBAAkB,SAAAE,GAChB,EAAKY,UAAS,SAAAC,GACZ,OAAO,eAAGb,EAAOc,cAAgBD,EAAUb,EAAOc,eAAiB,O,EAIvEC,mBAAqB,WACnB,OAAO,EAAKJ,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,K,EAG3DW,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,IAAM,EAAKP,MAAMR,KAAQ,EAAKY,uB,4CAGnD,WACE,MAA+BtB,KAAKkB,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qBAAKc,UAAU,MAAf,SACE,eAAC,EAAD,WACE,6EACA,cAAC,EAAD,CACEtB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBL,KAAKK,kBAExB,cAAC,EAAD,CACEK,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOb,KAAKsB,qBACZR,mBAAoBd,KAAKuB,6C,GAjCnBrB,aAyCHe,ICzCAU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc62b344.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass Section extends Component {\n  render() {\n    const { children } = this.props;\n\n    return <section>{children}</section>;\n  }\n}\n\nexport default Section;\n","import { Component } from 'react';\n\nclass FeedbackOptions extends Component {\n  render() {\n    const { options, onLeaveFeedback } = this.props;\n\n    return (\n      <>\n        <h2>Please leave feedback</h2>\n        {options.map(option => {\n          return (\n            <button\n              key={option}\n              onClick={() => {\n                onLeaveFeedback(option);\n              }}\n            >\n              {option}\n            </button>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n","import { Component } from 'react';\n\nclass Statistics extends Component {\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n\n    return (\n      <>\n        <h2>Statistics</h2>\n        <p>\n          Good:<span>{good}</span>\n        </p>\n        <p>\n          Neutral:<span>{neutral}</span>\n        </p>\n        <p>\n          Bad:<span>{bad}</span>\n        </p>\n        <p>\n          Total:<span>{total}</span>\n        </p>\n        {!isNaN(positivePercentage) && (\n          <p>\n            Positive feedback:<span>{positivePercentage}%</span>\n          </p>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Statistics;\n","import { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\n\nconst INITIAL_STATE = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nclass App extends Component {\n  state = { ...INITIAL_STATE };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => {\n      return { [option.toLowerCase()]: prevState[option.toLowerCase()] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((100 * this.state.good) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Section>\n          <h1>Welcome to feedback statistics application!</h1>\n          <FeedbackOptions\n            options={['Good', 'Neutral', 'Bad']}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}