{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INITIAL_STATE","good","neutral","bad","App","state","onGoodButtonClick","setState","prevState","onNeutralButtonClick","onBadButtonClick","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","className","onClick","isNaN","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAGMA,EAAgB,CACpBC,KAAM,EACNC,QAAS,EACTC,IAAK,GAGDC,E,4MACJC,M,eAAaL,G,EAEbM,kBAAoB,WAClB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEP,KAAMO,EAAUP,KAAO,O,EAIpCQ,qBAAuB,WACrB,EAAKF,UAAS,SAAAC,GACZ,MAAO,CAAEN,QAASM,EAAUN,QAAU,O,EAI1CQ,iBAAmB,WACjB,EAAKH,UAAS,SAAAC,GACZ,MAAO,CAAEL,IAAKK,EAAUL,IAAM,O,EAIlCQ,mBAAqB,WACnB,OAAO,EAAKN,MAAMF,IAAM,EAAKE,MAAMH,QAAU,EAAKG,MAAMJ,M,EAG1DW,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,IAAM,EAAKT,MAAMJ,KAAQ,EAAKU,uB,4CAGnD,WACE,MAA+BI,KAAKV,MAA5BJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,sBAAKa,UAAU,MAAf,UACE,6EACA,uDACA,wBAAQC,QAASF,KAAKT,kBAAtB,kBACA,wBAAQW,QAASF,KAAKN,qBAAtB,qBACA,wBAAQQ,QAASF,KAAKL,iBAAtB,iBACA,4CACA,sCACO,+BAAOT,OAEd,yCACU,+BAAOC,OAEjB,qCACM,+BAAOC,OAEb,uCACQ,+BAAOY,KAAKJ,2BAElBO,MAAMH,KAAKH,oCACX,mDACoB,iCAAOG,KAAKH,kCAAZ,iB,GAtDZO,aA8DHf,IC3DAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1acc16a.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\n\nconst INITIAL_STATE = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nclass App extends Component {\n  state = { ...INITIAL_STATE };\n\n  onGoodButtonClick = () => {\n    this.setState(prevState => {\n      return { good: prevState.good + 1 };\n    });\n  };\n\n  onNeutralButtonClick = () => {\n    this.setState(prevState => {\n      return { neutral: prevState.neutral + 1 };\n    });\n  };\n\n  onBadButtonClick = () => {\n    this.setState(prevState => {\n      return { bad: prevState.bad + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.bad + this.state.neutral + this.state.good;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((100 * this.state.good) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Welcome to Feedback statistics application!</h1>\n        <h2>Please leave feedback</h2>\n        <button onClick={this.onGoodButtonClick}>Good</button>\n        <button onClick={this.onNeutralButtonClick}>Neutral</button>\n        <button onClick={this.onBadButtonClick}>Bad</button>\n        <h2>Statistics</h2>\n        <p>\n          Good:<span>{good}</span>\n        </p>\n        <p>\n          Neutral:<span>{neutral}</span>\n        </p>\n        <p>\n          Bad:<span>{bad}</span>\n        </p>\n        <p>\n          Total:<span>{this.countTotalFeedback()}</span>\n        </p>\n        {!isNaN(this.countPositiveFeedbackPercentage()) && (\n          <p>\n            Positive feedback:<span>{this.countPositiveFeedbackPercentage()}%</span>\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}