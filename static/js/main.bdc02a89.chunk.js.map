{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","children","this","props","Component","FeedbackOptions","options","onLeaveFeedback","className","s","title","map","option","button","onClick","Notification","message","description","Statistics","good","neutral","bad","total","positivePercentage","value","isNaN","App","state","setState","prevState","toLowerCase","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdc02a89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__3xDPN\",\"description\":\"Statistics_description__1_Fhk\",\"value\":\"Statistics_value__3WtUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FeedbackOptions_title__3flIz\",\"button\":\"FeedbackOptions_button__3eDiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Notification_description__1L_Lt\"};","import { Component } from 'react';\n\nclass Section extends Component {\n  render() {\n    const { children } = this.props;\n\n    return <section>{children}</section>;\n  }\n}\n\nexport default Section;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nclass FeedbackOptions extends Component {\n  static propTypes = {\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const { options, onLeaveFeedback } = this.props;\n\n    return (\n      <>\n        <h2 className={s.title}>Please leave feedback</h2>\n        {options.map(option => {\n          return (\n            <button\n              className={s.button}\n              key={option}\n              onClick={() => {\n                onLeaveFeedback(option);\n              }}\n            >\n              {option}\n            </button>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n","import { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport s from './Notification.module.css';\n\nclass Notification extends Component {\n  static propTypes = {\n    message: PropTypes.string,\n  };\n\n  render() {\n    const { message } = this.props;\n\n    return <p className={s.description}>{message}</p>;\n  }\n}\n\nexport default Notification;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nclass Statistics extends Component {\n  static propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n  };\n\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n\n    return (\n      <>\n        <h2 className={s.title}>Statistics</h2>\n        <p className={s.description}>\n          Good:<span className={s.value}>{good}</span>\n        </p>\n        <p className={s.description}>\n          Neutral:<span className={s.value}>{neutral}</span>\n        </p>\n        <p className={s.description}>\n          Bad:<span className={s.value}>{bad}</span>\n        </p>\n        <p className={s.description}>\n          Total:<span className={s.value}>{total}</span>\n        </p>\n        {!isNaN(positivePercentage) && (\n          <p className={s.description}>\n            Positive feedback:<span className={s.value}>{positivePercentage}%</span>\n          </p>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Statistics;\n","import { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Statistics from './components/Statistics';\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => {\n      return { [option.toLowerCase()]: prevState[option.toLowerCase()] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((100 * this.state.good) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Section>\n          <h1>Welcome to feedback statistics application!</h1>\n          <FeedbackOptions\n            options={['Good', 'Neutral', 'Bad']}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message={'There is no feedback'} />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}